@using library_management_system.Model
@using library_management_system.Services

@inject DbApi dbApi
@inject AlertService alertService


<Toasts class="p-3" Messages="alertService.Messages" Placement="ToastsPlacement.TopRight"/>

<Accordion>
    <AccordionItem Title="Borrowed books">
        <Content>
            @foreach (var borrowedBook in BorrowedBooks)
            {
                var book = borrowedBook.Book!;

                <div class="book-record">
                    Title: @book.Title &emsp; Author: @book.Author
                    <Button Color="ButtonColor.Primary" onclick="@(() => ReturnBook(borrowedBook))">Return</Button>
                </div>
            }
        </Content>
    </AccordionItem>

    <AccordionItem Title="Reserved books">
        <Content>
            @foreach (var book in ReservedBooks.Select(reservedBook => reservedBook.Book!))
            {
                <div class="book-record">
                    Title: @book.Title &emsp; Author: @book.Author
                </div>
            }
        </Content>
    </AccordionItem>
</Accordion>


@code {
    [Parameter] public required User User { get; set; }

    private List<BorrowedBook> BorrowedBooks { get; set; } = [];
    private List<ReservedBook> ReservedBooks { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        BorrowedBooks = await dbApi.GetBorrowedBooks(User) ?? [];
        ReservedBooks = await dbApi.GetReservedBooks(User) ?? [];
    }

    private async Task ReturnBook(BorrowedBook borrowedBook)
    {
        var result = await dbApi.ReturnBook(borrowedBook);
        var message = result == EOperationResult.Success ? "Book returned successfully" : result.GetMessage();
        alertService.ShowOperationResult(result, message);
        
        await OnInitializedAsync();
        StateHasChanged();
    }

}