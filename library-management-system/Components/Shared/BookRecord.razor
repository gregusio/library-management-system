@using library_management_system.Model
@using library_management_system.Services

@inject DbApi DbApi
@inject AuthService AuthService
@inject AlertService AlertService
@inject AuthenticationStateProvider AuthenticationStateProvider


<Card Style="width:100%; height: 100%">
    <img class="image-style" src="data:image/jpg;base64, @Convert.ToBase64String(Book.BookCover.Image)" alt="Card image cap" />
    <CardBody Style="align-content: end">
        <CardTitle>@Book.Title</CardTitle>
        <CardText>
            <p>Author: @Book.Author</p>
            <p>Publisher: @Book.Publisher</p>
            <p>Publish Date: @Book.PublishDate</p>
            <p>Category: @Book.Category</p>
            <p>Available: @BookInventory!.AvailableCopies</p>
        </CardText>

        <AuthorizeView Roles="reader">
            <Authorized>
                <Button Color="ButtonColor.Primary" @onclick="Reserve">Reserve</Button>
            </Authorized>
        </AuthorizeView>

    </CardBody>
</Card>


<Toasts class="p-3" Messages="AlertService.Messages" Placement="ToastsPlacement.TopRight"/>


@code {
    [Parameter] public required Book Book { get; set; }

    private User? User { get; set; }
    private BookInventory? BookInventory { get; set; }
    private bool _editMode = false;
    private string? Title { get; set; }
    private string? Author { get; set; }
    private string? Publisher { get; set; }
    private DateTime PublishDate { get; set; }
    private ECategory Category { get; set; }
    private int Available { get; set; }

    protected override Task OnInitializedAsync()
    {
        User = AuthService.GetUser(AuthenticationStateProvider).Result;
        BookInventory = DbApi.GetBookInventory(Book);

        if (BookInventory == null)
        {
            AlertService.ShowWarning("Database error");
            BookInventory = new();
        }

        return base.OnInitializedAsync();
    }

    private void SaveState()
    {
        Title = Book.Title;
        Author = Book.Author;
        Publisher = Book.Publisher;
        PublishDate = Book.PublishDate;
        Category = Book.Category;
    }

    private void UndoChanges()
    {
        Book.Title = Title;
        Book.Author = Author;
        Book.Publisher = Publisher;
        Book.PublishDate = PublishDate;
        Book.Category = Category;
    }

    private void EditMode()
    {
        SaveState();
        _editMode = true;
    }

    private void CloseEditMode()
    {
        UndoChanges();
        _editMode = false;
    }

    private void CloseAndSave()
    {
        var result = DbApi.SaveChanges();

        if (result == EOperationResult.Success)
        {
            AlertService.ShowSuccess("Changes saved");
            _editMode = false;
        }
        else
        {
            AlertService.ShowWarning("Database error");
        }
    }

    private void Reserve()
    {
        var result = DbApi.ReserveBook(User!, Book);

        switch (result)
        {
            case EOperationResult.Success:
                AlertService.ShowSuccess("Book reserved");
                break;
            case EOperationResult.NoAvailableCopies:
                AlertService.ShowWarning("No available copies");
                break;
            case EOperationResult.DatabaseError:
                AlertService.ShowWarning("Database error");
                break;
        }
    }

}