@using library_management_system.Model
@using library_management_system.Services

@inject DbApi DbApi
@inject AuthService AuthService
@inject AlertService AlertService
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (_editMode)
{
    <Card Style="width:18rem;">
        <CardBody>
            <CardTitle>
                <input @bind="@Book.Title"/>
            </CardTitle>
            <CardText>
                <p>Author: <input @bind="@Book.Author"/></p>
                <p>Publisher: <input @bind="@Book.Publisher"/></p>
                <p>Publish Date: <input @bind="@Book.PublishDate"/></p>
                <p>Category: <input @bind="@Book.Category"/></p>
                <p>Available: <input @bind="@BookInventory!.AvailableCopies"></p>
            </CardText>
            <Button Color="ButtonColor.Primary" @onclick="CloseEditMode">Exit</Button>
            <Button Color="ButtonColor.Primary" @onclick="CloseAndSave">Save</Button>
        </CardBody>
    </Card>
}
else
{
    <Card Style="width:18rem;">
        <CardBody>
            <CardTitle>@Book.Title</CardTitle>
            <CardText>
                <p>Author: @Book.Author</p>
                <p>Publisher: @Book.Publisher</p>
                <p>Publish Date: @Book.PublishDate</p>
                <p>Category: @Book.Category</p>
                <p>Available: @BookInventory!.AvailableCopies</p>
            </CardText>

            <AuthorizeView Roles="admin,librarian">
                <Authorized>
                    <Button Color="ButtonColor.Primary" @onclick="EditMode">Edit</Button>
                </Authorized>
            </AuthorizeView>

            <AuthorizeView Roles="reader">
                <Authorized>
                    <Button Color="ButtonColor.Primary" @onclick="Reserve">Reserve</Button>
                </Authorized>   
            </AuthorizeView>

        </CardBody>
    </Card>
}


<Toasts class="p-3" Messages="AlertService.Messages" Placement="ToastsPlacement.TopRight"/>


@code {
    [Parameter] public required Book Book { get; set; }
    
    private User? User { get; set; }
    private BookInventory? BookInventory { get; set; }
    private bool _editMode = false;
    private string? Title { get; set; }
    private string? Author { get; set; }
    private string? Publisher { get; set; }
    private DateTime PublishDate { get; set; }
    private ECategory Category { get; set; }
    private int Available { get; set; }

    protected override Task OnInitializedAsync()
    {
        User = AuthService.GetUser(AuthenticationStateProvider).Result;
        BookInventory = DbApi.GetBookInventory(Book);
        
        return base.OnInitializedAsync();
    }

    private void SaveState()
    {
        Title = Book.Title;
        Author = Book.Author;
        Publisher = Book.Publisher;
        PublishDate = Book.PublishDate;
        Category = Book.Category;
    }

    private void UndoChanges()
    {
        Book.Title = Title;
        Book.Author = Author;
        Book.Publisher = Publisher;
        Book.PublishDate = PublishDate;
        Book.Category = Category;
    }

    private void EditMode()
    {
        SaveState();
        _editMode = true;
    }

    private void CloseEditMode()
    {
        UndoChanges();
        _editMode = false;
    }

    private void CloseAndSave()
    {
        DbApi.SaveChanges();
        AlertService.ShowSuccess("Changes saved");
        _editMode = false;
    }

    private void Reserve()
    {
        var result = DbApi.AddReservedBook(User!, Book);

        switch (result)
        {
            case EOperationResult.Success:
                AlertService.ShowSuccess("Book reserved");
                break;
            case EOperationResult.NoAvailableCopies:
                AlertService.ShowWarning("No available copies");
                break;
            case EOperationResult.DatabaseError:
                AlertService.ShowWarning("Database error");
                break;
        }
    }
}