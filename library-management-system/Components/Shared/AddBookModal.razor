@using library_management_system.Model
@using library_management_system.Services

@inject AlertService alertService
@inject DbApi dbApi


<Modal @ref="_modal" title="Add book" IsVerticallyCentered="true" Size="ModalSize.Large" OnHiding="OnHideModal">
    <BodyTemplate>
        <Toasts class="p-3" Messages="alertService.Messages" Placement="ToastsPlacement.TopRight"/>

        <div class="book-modal">
            <div class="form">
                <EditForm Model="Input" method="post" OnValidSubmit="AddBook"
                          FormName="add-book">
                    <DataAnnotationsValidator/>
                    <ValidationSummary class="text-danger" role="alert"/>

                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.ISBN" class="form-control"
                                   aria-required="true"/>
                        <label>ISBN</label>
                        <ValidationMessage For="() => Input.ISBN" class="text-danger"/>
                    </div>

                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Title" class="form-control"
                                   aria-required="true"/>
                        <label>Title</label>
                        <ValidationMessage For="() => Input.Title" class="text-danger"/>
                    </div>

                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Author" class="form-control"
                                   aria-required="true"/>
                        <label>Author</label>
                        <ValidationMessage For="() => Input.Author" class="text-danger"/>
                    </div>

                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Publisher" class="form-control"
                                   aria-required="true"/>
                        <label>Publisher</label>
                        <ValidationMessage For="() => Input.Publisher" class="text-danger"/>
                    </div>

                    <div class="form-floating mb-3">
                        <InputDate @bind-Value="Input.PublishDate" class="form-control"
                                   aria-required="true"/>
                        <label>Publish Date</label>
                        <ValidationMessage For="() => Input.PublishDate" class="text-danger"/>
                    </div>

                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="Input.Category" class="form-control"
                                     aria-required="true" placeholder="name@example.com">
                            @foreach (var category in Enum.GetValues(typeof(ECategory)))
                            {
                                <option value="@category">@category</option>
                            }
                        </InputSelect>
                        <label>Category</label>
                        <ValidationMessage For="() => Input.Category" class="text-danger"/>
                    </div>

                    <div class="form-floating mb-3">
                        <InputNumber @bind-Value="Input.Amount" class="form-control"
                                     aria-required="true" placeholder="password"/>
                        <label>Amount</label>
                        <ValidationMessage For="() => Input.Amount" class="text-danger"/>
                    </div>

                    <button type="submit" class="w-100 btn btn-lg btn-primary">Add Book</button>
                </EditForm>
            </div>

            <div class="image-select">
                <img class="image"
                     src="data:image/jpg;base64, @Convert.ToBase64String(Input.Image)"
                     alt="Image"/>

                <div class="file-select">
                    <InputFile OnChange="LoadFile" class="form-control" accept=".jpg, .jpeg, .png"/>
                </div>
            </div>
        </div>
    </BodyTemplate>
</Modal>


@code {
    [Parameter] public required EventCallback OnAdd { get; set; }

    private Modal _modal = default!;
    private AddBookInputModel Input { get; set; } = new();
    
    private const string DefaultImagePath = "Images/BookCovers/default-cover.jpg";
    private static byte[] DefaultImage { get; set; } = File.ReadAllBytes(DefaultImagePath);

    protected override Task OnInitializedAsync()
    {
        Input = new AddBookInputModel
        {
            Image = DefaultImage
        };

        return base.OnInitializedAsync();
    }

    public void Show()
    {
        _modal.ShowAsync();
    }

    private void OnHideModal()
    {
        _modal.HideAsync();
        alertService.ClearMessages();
    }

    public async Task AddBook(EditContext editContext)
    {
        var newCover = new BookCover
        {
            Image = Input.Image
        };

        var newBook = new Book
        {
            ISBN = Input.ISBN,
            Title = Input.Title,
            Author = Input.Author,
            Publisher = Input.Publisher,
            PublishDate = Input.PublishDate,
            Category = Input.Category,
            BookCover = newCover
        };

        var result = await dbApi.AddBook(newBook, Input.Amount, newCover);
        var message = result == EOperationResult.Success ? "Book added successfully" : result.GetMessage();
        alertService.ShowOperationResult(result, message);

        if (result == EOperationResult.Success)
        {
            Input = new AddBookInputModel();
        }

        await OnAdd.InvokeAsync();
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        var file = e.File;

        using var ms = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(ms);
        Input.Image = ms.ToArray();
    }

}