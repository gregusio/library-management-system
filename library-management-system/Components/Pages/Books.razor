@page "/books"
@rendermode InteractiveServer

@using library_management_system.Model
@using library_management_system.Services
@using library_management_system.Components.Shared

@inject DbApi DbApi
@inject AlertService AlertService


<PageTitle>Books</PageTitle>

<AuthorizeView>
    <Authorized Context="wholePage">

        <h1>Books</h1>

        <AuthorizeView Roles="admin,librarian">
            <Authorized Context="onlyForLibrarians">

                <Modal @ref="_modal" title="Modal title" IsVerticallyCentered="true" Size="ModalSize.ExtraLarge" OnHiding="OnHideModalClick">
                    <BodyTemplate>
                        <Toasts class="p-3" Messages="_messages" Placement="ToastsPlacement.TopRight"/>

                        <div class="container">
                            <p>ISBN</p>
                            <input @bind="@ISBN"/>
                        </div>
                        
                        <div class="container">
                            <p>Title</p>
                            <input @bind="@Title"/>
                        </div>

                        <div class="container">
                            <p>Author</p>
                            <input @bind="@Author"/>
                        </div>

                        <div class="container">
                            <p>Publisher</p>
                            <input @bind="@Publisher"/>
                        </div>

                        <div class="container">
                            <p>Publish Date</p>
                            <input type="date" @bind="@PublishDate"/>
                        </div>

                        <div class="container">
                            <p>Category</p>
                            <input @bind="@Category"/>
                        </div>

                        <div class="container">
                            <p>Amount</p>
                            <input type="number" @bind="@Amount"/>
                        </div>


                    </BodyTemplate>
                    <FooterTemplate>
                        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
                        <Button Color="ButtonColor.Primary" @onclick="AddBook">Add Book</Button>
                    </FooterTemplate>
                </Modal>

                <Button Color="ButtonColor.Primary" @onclick="OnShowModalClick">Add Book</Button>
            </Authorized>
        </AuthorizeView>

        <input @oninput="@(Search)"/>


        @for (var i = _booksPerPage * (_currentPageNumber - 1); i < _booksPerPage * _currentPageNumber && i < BooksCount; i++)
        {
            var i1 = i;
            <BookRecord Book="@SelectedBooks![i1]"/>
        }

        <Pagination ActivePageNumber="@_currentPageNumber"
                    TotalPages="@TotalPages"
                    PageChanged="OnPageChangedAsync"/>
    </Authorized>
    <NotAuthorized>
        <h1>Not authorized</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    private int _currentPageNumber = 1;
    private readonly int _booksPerPage = 4;

    private Modal _modal = default!;
    private string Title { get; set; } = null!;
    private string Author { get; set; } = null!;
    private string Publisher { get; set; } = null!;
    private string ISBN { get; set; } = null!;
    private DateTime PublishDate { get; set; }
    private ECategory Category { get; set; }
    private int Amount { get; set; }

    List<ToastMessage> _messages = new();

    private int TotalPages => (BooksCount - 1) / _booksPerPage + 1;

    private int BooksCount => SelectedBooks!.Count;

    private List<Book>? AllBooks { get; set; } = new();

    private List<Book>? SelectedBooks { get; set; } = new();

    protected override Task OnInitializedAsync()
    {
        AllBooks = DbApi.GetAllBooks();

        if (AllBooks == null)
        {
            AlertService.ShowWarning("Failed to load books");
            AllBooks = new();
        }
        
        SelectedBooks = AllBooks;
        
        return base.OnInitializedAsync();
    }

    private void ShowMessage(ToastType toastType)
    {
        _messages.Add(CreateToastMessage(toastType));
    }

    private ToastMessage CreateToastMessage(ToastType toastType)
    {
        if (toastType is ToastType.Success)
            return new ToastMessage
            {
                Type = toastType,
                Title = "Success",
                HelpText = $"{DateTime.Now}",
                Message = $"Book added successfully"
            };
        else
            return new ToastMessage
            {
                Type = toastType,
                Title = "Warning",
                HelpText = $"{DateTime.Now}",
                Message = $"Something went wrong"
            };
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { _currentPageNumber = newPageNumber; });
    }

    private void AddBook()
    {
        var newBook = new Book()
        {
            ISBN = ISBN,
            Title = Title,
            Author = Author,
            Publisher = Publisher,
            PublishDate = PublishDate,
            Category = Category,
        };

        var result = DbApi.AddBook(newBook, Amount);
        
        if (result == EOperationResult.Success)
        {
            ShowMessage(ToastType.Success);
            AllBooks = DbApi.GetAllBooks();
            SelectedBooks = AllBooks;
        }
        else
        {
            ShowMessage(ToastType.Warning);
        }
    }

    private async Task OnShowModalClick()
    {
        await _modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await _modal.HideAsync();
        _messages = new List<ToastMessage>();
    }

    private void Search(ChangeEventArgs e)
    {
        var search = e.Value!.ToString()!.ToLower();

        if (string.IsNullOrEmpty(search))
        {
            SelectedBooks = AllBooks;
            return;
        }

        SelectedBooks = AllBooks!.Where(b => b.Title!.ToLower().Contains(search) || b.Author!.ToLower().Contains(search)).ToList();
    }

}