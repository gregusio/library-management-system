@page "/books"
@rendermode InteractiveServer

@using library_management_system.Model
@using library_management_system.Services
@using library_management_system.Components.Shared

@inject DbApi DbApi
@inject AlertService AlertService


<PageTitle>Books</PageTitle>

<AuthorizeView>
    <Authorized Context="wholePage">

        <h1>Books</h1>

        <AuthorizeView Roles="admin,librarian">
            <Authorized Context="onlyForLibrarians">
                
                <AddBookModal OnAdd="OnInitializedAsync"></AddBookModal>

            </Authorized>
        </AuthorizeView>

        <input @oninput="@(Search)"/>


        @for (var i = _booksPerPage * (_currentPageNumber - 1); i < _booksPerPage * _currentPageNumber && i < BooksCount; i++)
        {
            var i1 = i;
            <BookRecord Book="@SelectedBooks![i1]"/>
        }

        <Pagination ActivePageNumber="@_currentPageNumber"
                    TotalPages="@TotalPages"
                    PageChanged="OnPageChangedAsync"/>
    </Authorized>
    <NotAuthorized>
        <h1>Not authorized</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    private int _currentPageNumber = 1;
    private readonly int _booksPerPage = 4;

    private int TotalPages => (BooksCount - 1) / _booksPerPage + 1;

    private int BooksCount => SelectedBooks!.Count;

    private List<Book>? AllBooks { get; set; } = new();

    private List<Book>? SelectedBooks { get; set; } = new();

    protected override Task OnInitializedAsync()
    {
        AllBooks = DbApi.GetAllBooks();

        if (AllBooks == null)
        {
            AlertService.ShowWarning("Failed to load books");
            AllBooks = new();
        }
        
        SelectedBooks = AllBooks;
        
        return base.OnInitializedAsync();
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { _currentPageNumber = newPageNumber; });
    }

    private void Search(ChangeEventArgs e)
    {
        var search = e.Value!.ToString()!.ToLower();

        if (string.IsNullOrEmpty(search))
        {
            SelectedBooks = AllBooks;
            return;
        }

        SelectedBooks = AllBooks!.Where(b => b.Title!.ToLower().Contains(search) || b.Author!.ToLower().Contains(search)).ToList();
    }

}