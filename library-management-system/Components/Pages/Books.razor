@page "/books"
@using library_management_system.Model
@using library_management_system.Services
@using Microsoft.EntityFrameworkCore
@using library_management_system.Components.Shared
@rendermode InteractiveServer
@inject DbApi DbApi
@inject AuthService AuthService

<PageTitle>Books</PageTitle>

<AuthorizeView>
    <Authorized Context="wholePage">

        <h1>Books</h1>

        <AuthorizeView Roles="admin,librarian">
            <Authorized Context="onlyForLibrarians">

                <Modal @ref="modal" title="Modal title" IsVerticallyCentered="true" Size="ModalSize.ExtraLarge" OnHiding="OnHideModalClick">
                    <BodyTemplate>
                        <Toasts class="p-3" Messages="messages" Placement="ToastsPlacement.TopRight"/>

                        <div class="container">
                            <p>ISBN</p>
                            <input @bind="@ISBN"/>
                        </div>
                        
                        <div class="container">
                            <p>Title</p>
                            <input @bind="@Title"/>
                        </div>

                        <div class="container">
                            <p>Author</p>
                            <input @bind="@Author"/>
                        </div>

                        <div class="container">
                            <p>Publisher</p>
                            <input @bind="@Publisher"/>
                        </div>

                        <div class="container">
                            <p>Publish Date</p>
                            <input type="date" @bind="@PublishDate"/>
                        </div>

                        <div class="container">
                            <p>Category</p>
                            <input @bind="@Category"/>
                        </div>

                        <div class="container">
                            <p>Amount</p>
                            <input type="number" @bind="@Amount"/>
                        </div>


                    </BodyTemplate>
                    <FooterTemplate>
                        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
                        <Button Color="ButtonColor.Primary" @onclick="AddBook">Add Book</Button>
                    </FooterTemplate>
                </Modal>

                <Button Color="ButtonColor.Primary" @onclick="OnShowModalClick">Add Book</Button>
            </Authorized>
        </AuthorizeView>

        <input @oninput="@((str) => Search((string)str.Value))"/>


        @for (var i = booksPerPage * (currentPageNumber - 1); i < booksPerPage * currentPageNumber && i < BooksCount; i++)
        {
            var i1 = i;
            <BookRecord Book="@SelectedBooks[i1]"/>
        }

        <Pagination ActivePageNumber="@currentPageNumber"
                    TotalPages="@TotalPages"
                    PageChanged="OnPageChangedAsync"/>
    </Authorized>
    <NotAuthorized>
        <h1>Not authorized</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    private int currentPageNumber = 1;
    private int booksPerPage = 4;

    private Modal modal = default!;
    private string Title { get; set; }
    private string Author { get; set; }
    private string Publisher { get; set; }
    private string ISBN { get; set; }
    private DateTime PublishDate { get; set; }
    private ECategory Category { get; set; }
    private int Amount { get; set; }

    List<ToastMessage> messages = new();

    private int TotalPages => (BooksCount - 1) / booksPerPage + 1;

    private int BooksCount => SelectedBooks.Count;

    private List<Book> AllBooks => DbApi.GetAllBooks();

    private List<Book> SelectedBooks = new();

    private void ShowMessage(ToastType toastType)
    {
        messages.Add(CreateToastMessage(toastType));
    }

    private ToastMessage CreateToastMessage(ToastType toastType)
    {
        if (toastType is ToastType.Success)
            return new ToastMessage
            {
                Type = toastType,
                Title = "Success",
                HelpText = $"{DateTime.Now}",
                Message = $"Book added successfully"
            };
        else
            return new ToastMessage
            {
                Type = toastType,
                Title = "Warning",
                HelpText = $"{DateTime.Now}",
                Message = $"Something went wrong"
            };
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { currentPageNumber = newPageNumber; });
    }

    private async void AddBook()
    {
        try
        {
            DbApi.AddBook(new Book()
            {
                ISBN = ISBN,
                Title = Title,
                Author = Author,
                Publisher = Publisher,
                PublishDate = PublishDate,
                Category = Category,
            }, Amount);

            SelectedBooks = AllBooks;

            ShowMessage(ToastType.Success);
        }
        catch (DbUpdateException e)
        {
            ShowMessage(ToastType.Warning);
        }
    }

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
        messages = new List<ToastMessage>();
    }

    protected override void OnInitialized()
    {
        SelectedBooks = AllBooks;
        base.OnInitialized();
    }

    private async void Search(string search)
    {
        SelectedBooks = AllBooks.Where(book => book.Title.ToLower().Contains(search.ToLower())).ToList();
    }

}