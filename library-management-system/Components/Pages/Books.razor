@page "/books"
@rendermode InteractiveServer

@using library_management_system.Model
@using library_management_system.Services
@using library_management_system.Components.Shared

@inject DbApi DbApi
@inject AlertService AlertService
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider


<PageTitle>Books</PageTitle>

<AuthorizeView>
    <Authorized Context="wholePage">
        <div class="common-page-styles">
            <div class="button-and-input">
                <AuthorizeView Roles="admin,librarian">
                    <Authorized Context="onlyForLibrarians">
                        <AddBookModal OnAdd="OnInitializedAsync"></AddBookModal>
                    </Authorized>
                </AuthorizeView>
                
                <AuthorizeView Roles="reader">
                    <Authorized Context="onlyForReaders">
                        <div class="button-placement">
                            <Tooltip Title="Borrowed books" Placement="TooltipPlacement.Top">
                                <Icon Name="IconName.BookFill" Color="IconColor.Primary" @onclick="ShowBorrowedBooks"></Icon>
                            </Tooltip>
                        </div>

                        <div class="button-placement">
                            <Tooltip Title="Reserved books" Placement="TooltipPlacement.Top">
                                <Icon Name="IconName.BookHalf" Color="IconColor.Primary" @onclick="ShowReservedBooks"></Icon>
                            </Tooltip>
                        </div>
                    </Authorized>
                </AuthorizeView>

                <div class="checkbox-wrapper">
                    <InputCheckbox id="showFavCheckbox" @bind-Value="@_showFav" @onclick="ShowFav"></InputCheckbox>
                    <label for="showFavCheckbox" class="checkbox-label">Show Favorites</label>
                </div>
                
                <InputText class="form-control" placeholder="Search for a book..." style="font-size: 3rem" @bind-Value="_searchString" @oninput="@(Search)"></InputText>
            </div>

            <div class="cards">
                @for (var i = _booksPerPage * (_currentPageNumber - 1); i < _booksPerPage * _currentPageNumber && i < BooksCount; i++)
                {
                    var i1 = i;
                    <div class="single-card" @onclick="@(() => OnShowDetails(SelectedBooks![i1]))">
                        <BookRecord Book="@SelectedBooks![i1]"/>
                    </div>
                    
                }
            </div>

            <div class="pagination">
                <Pagination ActivePageNumber="@_currentPageNumber"
                            TotalPages="@TotalPages"
                            PageChanged="OnPageChangedAsync"/>
            </div>
        </div>
        
        <BookDetailsModal @ref="_bookDetailsModal" OnSaveEdit="OnInitializedAsync" User="User"></BookDetailsModal>
    </Authorized>
    <NotAuthorized>
        <h1>Not authorized</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    private int _currentPageNumber = 1;
    private const int _booksPerPage = 4;
    private string _searchString = "";
    private bool _showFav;
    
    private User? User { get; set; }

    private BookDetailsModal _bookDetailsModal = default!;

    private int TotalPages => (BooksCount - 1) / _booksPerPage + 1;

    private int BooksCount => SelectedBooks!.Count;

    private List<Book>? AllBooks { get; set; }

    private List<Book>? SelectedBooks { get; set; } = [];
    
    private List<Book>? FavBooks { get; set; } = [];
    
    private List<ReservedBook>? ReservedBooks { get; set; } = [];
    
    private List<BorrowedBook>? BorrowedBooks { get; set; } = [];

    protected override Task OnInitializedAsync()
    {
        AllBooks = DbApi.GetAllBooks();
        User = AuthService.GetUser(AuthenticationStateProvider).Result ?? new User();
        FavBooks = DbApi.GetFavoriteBooks(User) ?? [];
        ReservedBooks = DbApi.GetReservedBooks(User) ?? [];
        BorrowedBooks = DbApi.GetBorrowedBooks(User) ?? [];
        if (AllBooks == null)
        {
            AlertService.ShowWarning("Failed to load books");
            AllBooks = [];
        }
        
        SelectedBooks = AllBooks;
        
        return base.OnInitializedAsync();
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { _currentPageNumber = newPageNumber; });
    }

    private void Search(ChangeEventArgs e)
    {
        var search = e.Value!.ToString()!.ToLower();

        if (string.IsNullOrEmpty(search))
        {
            SelectedBooks = AllBooks;
            return;
        }

        SelectedBooks = SelectedBooks!.Where(b => b.Title!.ToLower().Contains(search) || b.Author!.ToLower().Contains(search)).ToList();
    }
    
    private void OnShowDetails(Book book)
    {
        _bookDetailsModal.Show(book);
    }
    
    private void ShowFav()
    {
        SelectedBooks = !_showFav ? FavBooks : AllBooks;
    }
    
    private void ShowBorrowedBooks()
    {
        SelectedBooks = BorrowedBooks!.Select(b => b.Book).ToList()!;
    }
    
    private void ShowReservedBooks()
    {
        SelectedBooks = ReservedBooks!.Select(b => b.Book).ToList()!;
    }

}