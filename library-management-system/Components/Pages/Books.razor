@page "/books/{CurrState}"
@rendermode InteractiveServer

@using library_management_system.Model
@using library_management_system.Services
@using library_management_system.Components.Shared

@inject DbApi dbApi
@inject AlertService alertService
@inject AuthService authService
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager


<PageTitle>Books</PageTitle>

<AuthorizeView>
    <Authorized Context="authorized">
        <div class="common-page-styles">
            <div class="button-and-input">
                <AuthorizeView Roles="admin,librarian">
                    <div class="button-placement">
                        <Tooltip Title="Add book" Placement="TooltipPlacement.Top">
                            <Icon Name="IconName.PlusSquareFill" Color="IconColor.Primary" @onclick="OnAddBookClick"></Icon>
                        </Tooltip>
                    </div>
                </AuthorizeView>

                <div class="button-placement">
                    <Tooltip Title="All books" Placement="TooltipPlacement.Top">
                        <Icon Name="IconName.Book" Color="IconColor.Primary" @onclick="OnAllBooksClick"></Icon>
                    </Tooltip>
                </div>

                <div class="button-placement">
                    <Tooltip Title="Borrowed books" Placement="TooltipPlacement.Top">
                        <Icon Name="IconName.BookFill" Color="IconColor.Primary" @onclick="OnBorrowedBooksClick"></Icon>
                    </Tooltip>
                </div>

                <div class="button-placement">
                    <Tooltip Title="Reserved books" Placement="TooltipPlacement.Top">
                        <Icon Name="IconName.BookHalf" Color="IconColor.Primary" @onclick="OnReservedBooksClick"></Icon>
                    </Tooltip>
                </div>

                <div class="button-placement">
                    <Tooltip Title="Favorites books" Placement="TooltipPlacement.Top">
                        <Icon Name="IconName.HeartFill" Color="IconColor.Danger" @onclick="OnFavoritesBookClick"></Icon>
                    </Tooltip>
                </div>

                <InputText class="form-control" placeholder="Search for a book..." style="font-size: 3rem" @bind-Value="_searchString" @oninput="@(Search)"></InputText>
            </div>

            <div class="cards">
                @for (var i = FirstIdOnCurrentPage; i < FirstIdOnNextPage && i < BooksCount; i++)
                {
                    var i1 = i;

                    <div class="single-card" @onclick="@(() => OnShowDetails(SelectedBooks[i1]))">
                        <BookInfoCard Book="SelectedBooks[i1]" ShowBookCover="true" />
                    </div>
                }
            </div>

            <div class="pagination">
                <Pagination ActivePageNumber="@_currentPageNumber"
                            TotalPages="@TotalPages"
                            PageChanged="OnPageChangedAsync"/>
            </div>
        </div>

        <AddBookModal @ref="_addBookModal" OnAdd="OnInitializedAsync"/>

        <BookDetailsModal @ref="_bookDetailsModal" OnSaveEdit="OnInitializedAsync" User="User"/>
    </Authorized>
    <NotAuthorized>
        <h1>Not authorized</h1>
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter] public string CurrState { get; set; } = "all";

    private const int BooksPerPage = 4;

    private int _currentPageNumber = 1;
    private string _searchString = "";

    private int FirstIdOnCurrentPage => BooksPerPage * (_currentPageNumber - 1);
    private int FirstIdOnNextPage => BooksPerPage * _currentPageNumber;
    private int TotalPages => (BooksCount - 1) / BooksPerPage + 1;
    private int BooksCount => SelectedBooks.Count;

    private User? User { get; set; }

    private BookDetailsModal _bookDetailsModal = default!;
    private AddBookModal _addBookModal = default!;

    private List<Book>? AllBooks { get; set; }
    private List<Book> SelectedBooks { get; set; } = [];
    private List<Book> FavBooks { get; set; } = [];
    private List<ReservedBook>? ReservedBooks { get; set; } = [];
    private List<BorrowedBook>? BorrowedBooks { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        User = authService.GetUser(authenticationStateProvider).Result;
        AllBooks = await dbApi.GetAllBooks();
        FavBooks = await dbApi.GetFavoriteBooks(User!) ?? [];
        ReservedBooks = await dbApi.GetReservedBooks(User!) ?? [];
        BorrowedBooks = await dbApi.GetBorrowedBooks(User!) ?? [];

        if (AllBooks == null)
        {
            alertService.ShowWarning("Failed to load books");
            AllBooks = [];
        }

        SelectedBooks = CurrState switch
        {
            "all" => AllBooks,
            "borrowed" => BorrowedBooks!.Select(b => b.Book).ToList()!,
            "reserved" => ReservedBooks!.Select(b => b.Book).ToList()!,
            "favorites" => FavBooks,
            _ => AllBooks
        };
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { _currentPageNumber = newPageNumber; });
    }

    private void Search(ChangeEventArgs e)
    {
        var search = e.Value!.ToString()!.ToLower();

        if (string.IsNullOrEmpty(search))
        {
            SelectedBooks = AllBooks!;
            return;
        }

        SelectedBooks = SelectedBooks.Where(b => b.Title!.ToLower().Contains(search) || b.Author!.ToLower().Contains(search)).ToList();
    }

    private async Task OnShowDetails(Book book)
    {
        await _bookDetailsModal.Show(book);
    }

    private void OnAddBookClick()
    {
        _addBookModal.Show();
    }

    private void OnAllBooksClick()
    {
        navigationManager.NavigateTo("/books/all");
    }

    private void OnBorrowedBooksClick()
    {
        navigationManager.NavigateTo("/books/borrowed");
    }

    private void OnReservedBooksClick()
    {
        navigationManager.NavigateTo("/books/reserved");
    }

    private void OnFavoritesBookClick()
    {
        navigationManager.NavigateTo("/books/favorites");
    }

}