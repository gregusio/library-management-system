@page "/books"
@page "/books/{CurrState}"
@rendermode InteractiveServer

@using library_management_system.Model
@using library_management_system.Services
@using library_management_system.Components.Shared

@inject DbApi dbApi
@inject AlertService alertService
@inject AuthService authService
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navigationManager


<PageTitle>Books</PageTitle>

<AuthorizeView>
    <Authorized Context="authorized">
        <div class="common-page-styles">
            <div class="button-and-input">
                <div class="buttons">
                    <AuthorizeView Roles="admin,librarian">
                        <div class="button-placement">
                            <Tooltip Title="Add book" Placement="TooltipPlacement.Top">
                                <Icon Name="IconName.PlusSquareFill" Color="IconColor.Primary" @onclick="OnAddBookClick"></Icon>
                            </Tooltip>
                        </div>
                    </AuthorizeView>

                    <div class="button-placement">
                        <Tooltip Title="All books" Placement="TooltipPlacement.Top">
                            <Icon Name="IconName.Book" Color="@(CurrState == AllState ? ActiveIconColor : InactiveIconColor)" @onclick="OnAllBooksClick"></Icon>
                        </Tooltip>
                    </div>

                    <div class="button-placement">
                        <Tooltip Title="Borrowed books" Placement="TooltipPlacement.Top">
                            <Icon Name="IconName.BookFill" Color="@(CurrState == BorrowedState ? ActiveIconColor : InactiveIconColor)" @onclick="OnBorrowedBooksClick"></Icon>
                        </Tooltip>
                    </div>

                    <div class="button-placement">
                        <Tooltip Title="Reserved books" Placement="TooltipPlacement.Top">
                            <Icon Name="IconName.BookHalf" Color="@(CurrState == ReservedState ? ActiveIconColor : InactiveIconColor)" @onclick="OnReservedBooksClick"></Icon>
                        </Tooltip>
                    </div>

                    <div class="button-placement">
                        <Tooltip Title="Favorites books" Placement="TooltipPlacement.Top">
                            <Icon Name="IconName.HeartFill" Color="@(CurrState == FavoritesState ? ActiveIconColor : InactiveIconColor)" @onclick="OnFavoritesBookClick"></Icon>
                        </Tooltip>
                    </div>
                </div>

                <div class="search">
                    <InputText class="form-control" placeholder="Search for a book..." style="font-size: 3rem" @bind-Value="_searchString" @oninput="@(Search)"></InputText>
                </div>
            </div>

            <div class="cards">
                @for (var i = FirstIdOnCurrentPage; i < FirstIdOnNextPage && i < BooksCount; i++)
                {
                    var i1 = i;

                    <div class="@(IsBorrowedBookDelayed(i1) ? "selected" : "")">
                        <div class="single-card" @onclick="@(() => OnShowDetails(SelectedBooks[i1], i1))">

                            <BookInfoCard Book="SelectedBooks[i1]" BookInventory="BookInventories[SelectedBooks[i1].Id]" ShowBookCover="true"/>
                        </div>
                    </div>
                }
            </div>

            <div class="pagination">
                <Pagination ActivePageNumber="@_currentPageNumber"
                            TotalPages="@TotalPages"
                            PageChanged="OnPageChangedAsync"/>
            </div>
        </div>

        <AddBookModal @ref="_addBookModal" OnAdd="OnInitializedAsync"/>

        <BookDetailsModal @ref="_bookDetailsModal" CurrState="@CurrState" OnSaveEdit="OnInitializedAsync" User="User"/>
    </Authorized>
    <NotAuthorized>
        <h1>Not authorized</h1>
    </NotAuthorized>
</AuthorizeView>


@code {
    [Parameter] public string? CurrState { get; set; } = "";

    private const int BooksPerPage = 4;

    private int _currentPageNumber = 1;
    private string _searchString = "";

    private const IconColor ActiveIconColor = IconColor.Primary;
    private const IconColor InactiveIconColor = IconColor.Secondary;

    private const string? AllState = null;
    private const string BorrowedState = "borrowed";
    private const string ReservedState = "reserved";
    private const string FavoritesState = "favorites";

    private int FirstIdOnCurrentPage => BooksPerPage * (_currentPageNumber - 1);
    private int FirstIdOnNextPage => BooksPerPage * _currentPageNumber;
    private int TotalPages => (BooksCount - 1) / BooksPerPage + 1;
    private int BooksCount => SelectedBooks.Count;

    private User? User { get; set; }

    private BookDetailsModal _bookDetailsModal = default!;
    private AddBookModal _addBookModal = default!;

    private List<Book>? AllBooks { get; set; }
    private List<Book> SelectedBooks { get; set; } = [];
    private List<Book> FavBooks { get; set; } = [];
    private List<ReservedBook>? ReservedBooks { get; set; } = [];
    private List<BorrowedBook>? BorrowedBooks { get; set; } = [];
    private Dictionary<int, BookInventory> BookInventories { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        User = await authService.GetUser(authenticationStateProvider);
        AllBooks = await dbApi.GetAllBooks();
        FavBooks = await dbApi.GetFavoriteBooks(User!) ?? [];
        ReservedBooks = await dbApi.GetReservedBooks(User!) ?? [];
        BorrowedBooks = await dbApi.GetBorrowedBooks(User!) ?? [];

        if (AllBooks == null)
        {
            alertService.ShowWarning("Failed to load books");
            AllBooks = [];
        }

        SelectedBooks = CurrState switch
        {
            null => AllBooks,
            "borrowed" => BorrowedBooks!.Select(b => b.Book).ToList()!,
            "reserved" => ReservedBooks!.Select(b => b.Book).ToList()!,
            "favorites" => FavBooks,
            _ => AllBooks
        };

        foreach (var book in SelectedBooks)
        {
            var inventory = await GetBookInventory(book);
            BookInventories[book.Id] = inventory!;
        }
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { _currentPageNumber = newPageNumber; });
    }

    private void Search(ChangeEventArgs e)
    {
        var search = e.Value!.ToString()!.ToLower();

        if (string.IsNullOrEmpty(search))
        {
           SelectedBooks = CurrState switch
            {
                null => AllBooks!,
                "borrowed" => BorrowedBooks!.Select(b => b.Book).ToList()!,
                "reserved" => ReservedBooks!.Select(b => b.Book).ToList()!,
                "favorites" => FavBooks,
                _ => AllBooks!
            };
            return;
        }

        switch (CurrState)
        {
            case AllState:
                SelectedBooks = AllBooks!.Where(b => b.Title!.ToLower().Contains(search) || b.Author!.ToLower().Contains(search)).ToList();
                break;
            case BorrowedState:
                SelectedBooks = BorrowedBooks!.Select(b => b.Book!).Where(b => b.Title!.ToLower().Contains(search) || b.Author!.ToLower().Contains(search)).ToList();
                BorrowedBooks = BorrowedBooks!.Where(b => b.Book!.Title!.ToLower().Contains(search) || b.Book!.Author!.ToLower().Contains(search)).ToList();
                break;
            case ReservedState:
                SelectedBooks = ReservedBooks!.Select(b => b.Book!).Where(b => b.Title!.ToLower().Contains(search) || b.Author!.ToLower().Contains(search)).ToList();
                ReservedBooks = ReservedBooks!.Where(b => b.Book!.Title!.ToLower().Contains(search) || b.Book!.Author!.ToLower().Contains(search)).ToList();
                break;
            case FavoritesState:
                SelectedBooks = FavBooks.Where(b => b.Title!.ToLower().Contains(search) || b.Author!.ToLower().Contains(search)).ToList();
                break;
        }
    }

    private async Task<BookInventory?> GetBookInventory(Book book)
    {
        return await dbApi.GetBookInventory(book);
    }

    private bool IsBorrowedBookDelayed(int index)
    {
        return CurrState == "borrowed" && BorrowedBooks![index].Deadline < DateTime.Now;
    }

    private async Task OnShowDetails(Book book, int index)
    {
        switch (CurrState)
        {
            case "borrowed":
                await _bookDetailsModal.Show(book, BorrowedBooks![index], null);
                break;
            case "reserved":
                await _bookDetailsModal.Show(book, null, ReservedBooks![index]);
                break;
            default:
                await _bookDetailsModal.Show(book, null, null);
                break;
        }
    }

    private void OnAddBookClick()
    {
        _addBookModal.Show();
    }

    private void OnAllBooksClick()
    {
        navigationManager.NavigateTo("/books");
    }

    private void OnBorrowedBooksClick()
    {
        navigationManager.NavigateTo("/books/borrowed");
    }

    private void OnReservedBooksClick()
    {
        navigationManager.NavigateTo("/books/reserved");
    }

    private void OnFavoritesBookClick()
    {
        navigationManager.NavigateTo("/books/favorites");
    }

}