@page "/"
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Identity;
@using library_management_system.Database
@using library_management_system.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject DbApi DbApi
@rendermode InteractiveServer

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<div class="form-group mb-3">
    <label for="username">Username</label>
    <input id="username" class="form-control" @bind="@LoginInput"/>
</div>

<div class="form-group mb-3">
    <label for="password">Password</label>
    <input id="password" type="password" class="form-control" @bind="@PasswordInput"/>
</div>

<button @onclick="HandleLogin" class="btn btn-primary">Login</button>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger">@ErrorMessage</p>
}

@code {
    string LoginInput { get; set; }
    string PasswordInput { get; set; }
    string ErrorMessage;

    private void HandleLogin()
    {
        var user = DbApi.GetReader(LoginInput);

        if (user != null && VerifyPassword(user.PasswordHash, PasswordInput))
        {
            // Correct login and password for reader
            AuthService.User = user;
            NavigationManager.NavigateTo("/books");
        }
        else
        {
            // Checking librarians if not found among readers
            var librarian = DbApi.GetLibrarian(LoginInput);

            if (librarian != null && VerifyPassword(librarian.PasswordHash, PasswordInput))
            {
                AuthService.User = librarian;
                NavigationManager.NavigateTo("/books");
            }
            else
            {
                ErrorMessage = "Invalid login or password";
            }
        }
    }


    private bool VerifyPassword(string? hashedPassword, string? providedPassword)
    {
        if (providedPassword == null)
        {
            return false;
        }
        // Your logic for hashing and verifying the password
        // For example, using ASP.NET Core Identity's PasswordHasher
        var passwordHasher = new PasswordHasher<User>();
        var result = passwordHasher.VerifyHashedPassword(null, hashedPassword, providedPassword);

        return result == PasswordVerificationResult.Success;
    }

}