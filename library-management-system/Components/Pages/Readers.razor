@page "/readers"
@rendermode InteractiveServer

@using library_management_system.Model
@using library_management_system.Services
@using library_management_system.Components.Shared

@inject DbApi dbApi
@inject AlertService alertService


<PageTitle>Readers</PageTitle>

<AuthorizeView Roles="admin,librarian">
    <Authorized>
        <div class="common-page-styles">
            <div class="button-and-input">
                <Button Size="Size.ExtraLarge" Color="ButtonColor.Primary" @onclick="OnAddReaderClick">Add Reader</Button>
                
                <InputText class="form-control" placeholder="Search for a reader..." style="font-size: 3rem" @bind-Value="_searchString" @oninput="@(Search)"></InputText>
            </div>
            
            <div class="cards">
                @for (var i = FirstIdOnCurrentPage; i < FirstIdOnNextPage && i < ReadersCount; i++)
                {
                    var i1 = i;
                    
                    <div class="single-card" @onclick="@(() => OnShowDetails(SelectedReaders![i1]))">
                        <UserInfoCard User="SelectedReaders![i1]" ShowAvatar="true" />
                    </div>
                }
            </div>
            
            <div class="pagination">
                <Pagination ActivePageNumber="@_currentPageNumber" 
                            TotalPages="@TotalPages" 
                            PageChanged="OnPageChangedAsync"/>
            </div>
            
        </div>
        
        <UserDetailsModal @ref="_userDetailsModal" OnSaveEdit="OnInitializedAsync" />

        <AddUserModal @ref="_addUserModal" Role="@(ERole.Reader)" OnAdd="OnInitializedAsync"/>
    </Authorized>
    <NotAuthorized>
        <h1>Not authorized</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    private const int ReadersPerPage = 4;
    
    private int _currentPageNumber = 1;
    private string? _searchString = "";

    private int FirstIdOnCurrentPage => ReadersPerPage * (_currentPageNumber - 1);
    private int FirstIdOnNextPage => ReadersPerPage * _currentPageNumber;
    private int TotalPages => (ReadersCount - 1) / ReadersPerPage + 1;
    private int ReadersCount => SelectedReaders!.Count;

    private List<User>? AllReaders { get; set; } = [];
    private List<User>? SelectedReaders { get; set; } = [];
    
    private UserDetailsModal _userDetailsModal = default!;
    private AddUserModal _addUserModal = default!;

    protected override async Task OnInitializedAsync()
    {
        AllReaders = await dbApi.GetAllReaders();

        if (AllReaders == null)
        {
            alertService.ShowWarning("Failed to load readers. Please try again later.");
            AllReaders = [];
        }
        
        SelectedReaders = AllReaders;
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { _currentPageNumber = newPageNumber; });
    }

    private async void Search(ChangeEventArgs e)
    {
        await Task.Run(() =>
        {
            SelectedReaders = AllReaders!.Where(reader => reader.Name!.Contains(e.Value!.ToString()!)).ToList();
            _currentPageNumber = 1;
        });
    }
    
    private void OnShowDetails(User user)
    {
        _userDetailsModal.Show(user);
    }
    
    private async Task OnAddReaderClick()
    {
        await _addUserModal.Show();
    }

}