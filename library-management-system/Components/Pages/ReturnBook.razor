@page "/return-book"
@using library_management_system.Model
@using library_management_system.Services
@rendermode InteractiveServer
@inject DbApi DbApi
@inject AlertService AlertService

<PageTitle>Return book</PageTitle>

<AuthorizeView Roles="admin,librarian">
    <Authorized>
    
    
        <h3>Return book</h3>

        <BlazoredTypeahead SearchMethod="GetReadersLocal"
                           TItem="User"
                           TValue="User"
                           @bind-Value="SelectedPerson"
                           placeholder="Search by first name...">
            <SelectedTemplate Context="reader">
                @{
                    var selectedPerson = reader;

                    <text>@selectedPerson?.Name @selectedPerson?.Surname</text>
                }
            </SelectedTemplate>
            <ResultTemplate Context="person">
                @person.Name @person.Surname (Id: @person.Id)
            </ResultTemplate>
        </BlazoredTypeahead>

        <BlazoredTypeahead SearchMethod="GetBooksLocal"
                           TItem="BorrowedBook"
                           TValue="BorrowedBook"
                           @bind-Value="SelectedBook"
                           placeholder="Search by title...">
            <SelectedTemplate Context="borrowedBook">
                @{
                    var selectedBook = DbApi.GetBook(borrowedBook.BookId);

                    <text>@selectedBook?.Title @selectedBook?.Author</text>
                }
            </SelectedTemplate>
            <ResultTemplate Context="borrowedBook">
                @(DbApi.GetBook(borrowedBook.BookId).Title) @(DbApi.GetBook(borrowedBook.BookId).Author) (Id: @(DbApi.GetBook(borrowedBook.BookId).BookId) )
            </ResultTemplate>
        </BlazoredTypeahead>

        <Button Color="ButtonColor.Primary" Size="Size.Large" @onclick="TryReturnBook"> Return book </Button>

        <Toasts class="p-3" Messages="AlertService.Messages" Placement="ToastsPlacement.TopRight"/>

    </Authorized>
    <NotAuthorized>
        <h1>Not authorized</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<User> AllReaders => DbApi.GetAllReaders();
    private User? SelectedPerson { get; set; }
    private List<BorrowedBook> BorrowedBooks => DbApi.GetBorrowedBooks(SelectedPerson);
    private BorrowedBook? SelectedBook { get; set; }

    private async Task<IEnumerable<User>> GetReadersLocal(string searchText)
    {
        return await Task.FromResult(AllReaders.Where(reader => reader.Name.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<BorrowedBook>> GetBooksLocal(string searchText)
    {
        return await Task.FromResult(BorrowedBooks.Where(borrowedBook => DbApi.GetBook(borrowedBook.BookId)!.Title.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private void TryReturnBook()
    {
        if (SelectedBook != null)
        {
            DbApi.RemoveBorrowedBook(SelectedBook);
            AlertService.ShowSuccess("Book returned successfully");
        }
        else
        {
            AlertService.ShowInfo("Please select a book");
        }
    }

}