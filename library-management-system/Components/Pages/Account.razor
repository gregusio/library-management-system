@page "/account"
@rendermode InteractiveServer

@using library_management_system.Services
@using library_management_system.Data
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@inject AuthService AuthService
@inject AlertService AlertService
@inject DbApi DbApi
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject ILogger<Account> Logger

<h3>Account</h3>

<UserRecord User="@User"></UserRecord>

<Button Color="ButtonColor.Primary" Size="Size.Medium" Style="margin-top: 10px" @onclick="OnShowChangePasswordClick">Change password</Button>

<Modal @ref="_passwordModal" title="Change password" IsVerticallyCentered="true" Size="ModalSize.ExtraLarge" OnHiding="OnHideModalClick">
    <BodyTemplate>
        <Toasts class="p-3" Messages="AlertService.Messages" Placement="ToastsPlacement.TopRight"/>
        
        <div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
                <label for="old-password" class="form-label">Old password</label>
                <ValidationMessage For="() => Input.OldPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
                <label for="new-password" class="form-label">New password</label>
                <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
                <label for="confirm-password" class="form-label">Confirm password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
        </EditForm>
    </div>
</div>


    </BodyTemplate>
    <FooterTemplate>
        
    </FooterTemplate>
</Modal>

@code {
    private Modal _loginModal = default!;
    private Modal _passwordModal = default!;
    private User? User { get; set;}
    private string _currentLogin = default!;
    private string _newLogin = default!;
    private string _confirmNewLogin = default!;
    private string _currentPassword = default!;
    private string _newPassword = default!;
    private string _confirmNewPassword = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        User = AuthService.GetUser(AuthenticationStateProvider).Result;
    }
    
    private async Task OnShowChangeLoginClick()
    {
        await _loginModal.ShowAsync();
    }
    
    private async Task OnShowChangePasswordClick()
    {
        await _passwordModal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await _loginModal.HideAsync();
        AlertService.ClearMessages();
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(User, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            AlertService.ShowWarning("Something went wrong. Please try again.");
            return;
        }

        Logger.LogInformation("User changed their password successfully.");

        AlertService.ShowSuccess("Your password has been changed.");

        Input = new InputModel();
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
    
}