@page "/borrowed-books"
@rendermode InteractiveServer

@using library_management_system.Model
@using library_management_system.Services

@inject AuthService AuthService
@inject DbApi DbApi
@inject AlertService AlertService
@inject AuthenticationStateProvider AuthenticationStateProvider


<PageTitle>Borrowed books</PageTitle>

<AuthorizeView>
    <Authorized>

    <h3>Borrowed books</h3>

    @foreach (var borrowedBook in AllBorrowedBooks!)
    {
        var book = DbApi.GetBook(borrowedBook.BookId)!;
        var deadline = borrowedBook.Deadline;
        <Card Style="width:18rem;">
            <CardBody>
                <CardTitle>@book.Title</CardTitle>
                <CardText>
                    <p>Author: @book.Author</p>
                    <p>Publisher: @book.Publisher</p>
                    <p>Publish Date: @book.PublishDate</p>
                    <p>Category: @book.Category</p>
                    @if (deadline < DateTime.Now)
                    {
                        <p><span class="text-danger">Deadline: @deadline</span></p>
                        <Button Color="ButtonColor.Primary" Size="Size.Large" @onclick="@(() => Postpone(borrowedBook))"> Postpone </Button>
                    }
                    else
                    {
                        <p>Deadline: @deadline</p>
                    }

                </CardText>
            </CardBody>
        </Card>
    }

    <Toasts class="p-3" Messages="AlertService.Messages" Placement="ToastsPlacement.TopRight"/>

    </Authorized>
</AuthorizeView>

@code {
    private User? User { get; set; }
    private List<BorrowedBook>? AllBorrowedBooks { get; set; } = new();

    protected override Task OnInitializedAsync()
    {
        User = AuthService.GetUser(AuthenticationStateProvider).Result;
        
        AllBorrowedBooks = DbApi.GetBorrowedBooks(User!);

        if (AllBorrowedBooks == null)
        {
            AlertService.ShowWarning("Failed to load borrowed books!");
            AllBorrowedBooks = new();
        }
        
        return base.OnInitializedAsync();
    }

    private void Postpone(BorrowedBook borrowedBook)
    {
        var result = DbApi.PostponeBorrowedBook(borrowedBook);
        
        AlertService.ShowOperationResult(result);
    }
}