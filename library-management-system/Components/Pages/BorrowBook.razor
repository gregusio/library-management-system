@page "/borrow-book"
@using library_management_system.Model
@using library_management_system.Services
@rendermode InteractiveServer
@inject DbApi DbApi
@inject AlertService AlertService

<PageTitle>Borrow book</PageTitle>

<AuthorizeView Roles="admin,librarian">
    <Authorized>

        <h3>BorrowBook</h3>

        <BlazoredTypeahead SearchMethod="GetReadersLocal"
                           TItem="User"
                           TValue="User"
                           @bind-Value="SelectedPerson"
                           placeholder="Search by first name...">
            <SelectedTemplate Context="personId">
                @{
                    var selectedPerson = SelectedPerson;

                    <text>@selectedPerson?.Name @selectedPerson?.Surname</text>
                }
            </SelectedTemplate>
            <ResultTemplate Context="person">
                @person.Name @person.Surname (Id: @person.Id)
            </ResultTemplate>
        </BlazoredTypeahead>

        <BlazoredTypeahead SearchMethod="GetBooksLocal"
                           TItem="Book"
                           TValue="Book"
                           @bind-Value="SelectedBook"
                           placeholder="Search by title...">
            <SelectedTemplate Context="personId">
                @{
                    var selectedBook = SelectedBook;

                    <text>@selectedBook?.Title @selectedBook?.Author</text>
                }
            </SelectedTemplate>
            <ResultTemplate Context="book">
                @book.Title @book.Author (Id: @book.Id)
            </ResultTemplate>
        </BlazoredTypeahead>

        <Button Color="ButtonColor.Primary" Size="Size.Large" @onclick="TryBorrowBook"> Borrow Book </Button>

        <Toasts class="p-3" Messages="AlertService.Messages" Placement="ToastsPlacement.TopRight"/>

    </Authorized>
    <NotAuthorized>
        <h1>Not authorized</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<User> AllReaders { get; set; } = new();
    private User? SelectedPerson { get; set; }
    private List<Book> AllBooks { get; set; } = new();
    private Book? SelectedBook { get; set; }

    protected override Task OnInitializedAsync()
    {
        AllReaders = DbApi.GetAllReaders();
        AllBooks = DbApi.GetAllBooks();
        
        return base.OnInitializedAsync();
    }

    private async Task<IEnumerable<User>> GetReadersLocal(string searchText)
    {
        return await Task.FromResult(AllReaders.Where(reader => reader.Name.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Book>> GetBooksLocal(string searchText)
    {
        return await Task.FromResult(AllBooks.Where(book => book.Title.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private void TryBorrowBook()
    {
        if (SelectedPerson == null || SelectedBook == null)
        {
            AlertService.ShowInfo("Please select a person and a book");
            return;
        }

        var reservedBook = DbApi.GetReservedBook(SelectedPerson, SelectedBook);

        EOperationResult result;
        if (reservedBook != null)
        {
            result = DbApi.ChangeReservedToBorrowed(SelectedPerson, reservedBook);

            AlertService.ShowOperationResult(result);
            
            return;
        }

        result = DbApi.AddBorrowedBook(SelectedPerson, SelectedBook);
        
        AlertService.ShowOperationResult(result);
    }
}