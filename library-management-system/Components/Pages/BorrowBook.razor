@page "/borrow-book"
@rendermode InteractiveServer

@using library_management_system.Model
@using library_management_system.Services

@inject DbApi dbApi
@inject AlertService alertService


<PageTitle>Borrow book</PageTitle>

<AuthorizeView Roles="admin,librarian">
    <Authorized>
        <Toasts class="p-3" Messages="alertService.Messages" Placement="ToastsPlacement.TopRight"/>

        <div class="borrow-page">
            <div class="content">
                <BlazoredTypeahead SearchMethod="GetReadersLocal"
                                   TItem="User"
                                   TValue="User"
                                   @bind-Value="SelectedPerson"
                                   placeholder="Search by first name...">
                    <SelectedTemplate Context="person">
                        @{
                            <text>@person.Name @person.Surname</text>
                        }
                    </SelectedTemplate>
                    <ResultTemplate Context="person">
                        @person.Name @person.Surname (email: @person.Email)
                    </ResultTemplate>
                </BlazoredTypeahead>

                <BlazoredTypeahead SearchMethod="GetBooksLocal"
                                   TItem="Book"
                                   TValue="Book"
                                   @bind-Value="SelectedBook"
                                   placeholder="Search by title...">
                    <SelectedTemplate Context="book">
                        @{
                            <text>@book.Title @book.Author</text>
                        }
                    </SelectedTemplate>
                    <ResultTemplate Context="book">
                        @book.Title @book.Author (ISBN: @book.ISBN)
                    </ResultTemplate>
                </BlazoredTypeahead>

                <div class="last-row">
                    <div class="form-floating mb-3">
                        <InputDate @bind-Value="Deadline" class="form-control" style="height: 5rem"
                                   aria-required="true"/>
                        <label>Deadline</label>
                    </div>

                    <div class="button-container">
                        <Button Color="ButtonColor.Primary" Size="Size.Medium" @onclick="TryBorrowBook"> Borrow Book </Button>
                    </div>
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <h1>Not authorized</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<User>? AllReaders { get; set; } = [];
    private List<Book>? AllBooks { get; set; } = [];

    private User? SelectedPerson { get; set; }
    private Book? SelectedBook { get; set; }
    private DateTime Deadline { get; set; } = DateTime.Now.AddDays(14);

    protected override Task OnInitializedAsync()
    {
        AllReaders = dbApi.GetAllReaders();
        AllBooks = dbApi.GetAllBooks();

        if (AllReaders != null && AllBooks != null) return base.OnInitializedAsync();

        alertService.ShowWarning("Failed to load data from the database. Please try again later.");
        AllReaders = [];
        AllBooks = [];

        return base.OnInitializedAsync();
    }

    private async Task<IEnumerable<User>> GetReadersLocal(string searchText)
    {
        return await Task.FromResult(AllReaders!.Where(reader => reader.Name!.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task<IEnumerable<Book>> GetBooksLocal(string searchText)
    {
        return await Task.FromResult(AllBooks!.Where(book => book.Title!.ToLower().Contains(searchText.ToLower())).ToList());
    }

    private async Task TryBorrowBook()
    {
        if (SelectedPerson == null || SelectedBook == null)
        {
            alertService.ShowInfo("Please select a person and a book");
            return;
        }

        var reservedBook = dbApi.GetReservedBook(SelectedPerson, SelectedBook);

        EOperationResult result;
        if (reservedBook != null)
        {
            result = await dbApi.ChangeReservedToBorrowed(SelectedPerson, reservedBook);

            alertService.ShowOperationResult(result);

            return;
        }

        result = await dbApi.BorrowBook(SelectedPerson, SelectedBook);

        alertService.ShowOperationResult(result);
    }

}