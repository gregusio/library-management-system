@page "/librarians"
@rendermode InteractiveServer

@using library_management_system.Services
@using library_management_system.Model
@using library_management_system.Components.Shared

@inject DbApi dbApi
@inject AlertService alertService


<PageTitle>Librarians</PageTitle>

<AuthorizeView Roles="admin">
    <Authorized>
        <div class="common-page-styles">
            <div class="button-and-input">
                <AddUserModal Role="@(ERole.Librarian)" OnAdd="OnInitializedAsync"/>
            </div>

            <div class="cards">
                @for (var i = FirstIdOnCurrentPage; i < FirstIdOnNextPage && i < LibrariansCount; i++)
                {
                    var i1 = i;

                    <div class="single-card" @onclick="@(() => OnShowDetails(AllLibrarians![i1]))">
                        <UserRecord User="AllLibrarians![i1]"/>
                    </div>
                }
            </div>

            <div class="pagination">
                <Pagination ActivePageNumber="@_currentPageNumber"
                            TotalPages="TotalPages"
                            PageChanged="OnPageChangedAsync"/>
            </div>
        </div>

        <UserDetailsModal @ref="_userDetailsModal" OnSaveEdit="OnInitializedAsync"></UserDetailsModal>
    </Authorized>
    <NotAuthorized>
        <h1>Not authorized</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    private const int LibrariansPerPage = 4;

    private int _currentPageNumber = 1;

    private int FirstIdOnCurrentPage => LibrariansPerPage * (_currentPageNumber - 1);
    private int FirstIdOnNextPage => LibrariansPerPage * _currentPageNumber;
    private int LibrariansCount => AllLibrarians!.Count;
    private int TotalPages => (LibrariansCount - 1) / LibrariansPerPage + 1;

    private List<User>? AllLibrarians { get; set; } = [];

    private UserDetailsModal _userDetailsModal = default!;

    protected override Task OnInitializedAsync()
    {
        AllLibrarians = dbApi.GetAllLibrarians();

        if (AllLibrarians != null) return base.OnInitializedAsync();

        alertService.ShowWarning("Something went wrong while fetching librarians");
        AllLibrarians = new List<User>();

        return base.OnInitializedAsync();
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { _currentPageNumber = newPageNumber; });
    }

    private void OnShowDetails(User user)
    {
        _userDetailsModal.Show(user);
    }

}