@page "/librarians"
@rendermode InteractiveServer

@using library_management_system.Services
@using library_management_system.Model
@using library_management_system.Components.Shared

@inject DbApi DbApi
@inject AlertService AlertService


<PageTitle>Librarians</PageTitle>

<AuthorizeView Roles="admin">
    <Authorized>
        <div class="common-page-styles">

            <div class="button-and-input">
                <AddUserModal Role="@(ERole.Librarian)" OnAdd="OnInitializedAsync"/>
            </div>
            
            <div class="cards">
                @for (var i = _librariansPerPage * (_currentPageNumber - 1); i < _librariansPerPage * _currentPageNumber && i < LibrariansCount; i++)
                {
                    var i1 = i;
                    <div class="single-card">
                        <UserRecord User="@AllLibrarians![i1]"/>
                    </div>
                }
            </div>
            
            <div class="pagination">
                <Pagination ActivePageNumber="@_currentPageNumber"
                            TotalPages="@(LibrariansCount / _librariansPerPage)"
                            PageChanged="OnPageChangedAsync"/>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <h1>Not authorized</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    private int _currentPageNumber = 1;
    private const int _librariansPerPage = 4;

    private int LibrariansCount => AllLibrarians!.Count;

    private List<User>? AllLibrarians { get; set; } = [];

    protected override Task OnInitializedAsync()
    {
        AllLibrarians = DbApi.GetAllLibrarians();

        if (AllLibrarians != null) return base.OnInitializedAsync();
        
        AlertService.ShowWarning("Something went wrong while fetching librarians");
        AllLibrarians = new List<User>();

        return base.OnInitializedAsync();
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { _currentPageNumber = newPageNumber; });
    }

}