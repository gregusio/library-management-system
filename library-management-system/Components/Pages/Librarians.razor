@page "/librarians"
@rendermode InteractiveServer

@using library_management_system.Services
@using library_management_system.Data

@inject DbApi DbApi


<PageTitle>Librarians</PageTitle>

<AuthorizeView Roles="admin">
    <Authorized>

        <h1>Librarians</h1>

        <AddUserModal Role="@(ERole.Librarian)" OnAdd="OnInitializedAsync"/>

        @for (var i = _librariansPerPage * (_currentPageNumber - 1); i < _librariansPerPage * _currentPageNumber && i < LibrariansCount; i++)
        {
            var i1 = i;
            <UserRecord User="@AllLibrarians[i1]"/>
        }

        <Pagination ActivePageNumber="@_currentPageNumber"
                    TotalPages="@(LibrariansCount / _librariansPerPage)"
                    PageChanged="OnPageChangedAsync"/>

    </Authorized>
    <NotAuthorized>
        <h1>Not authorized</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    private int _currentPageNumber = 1;
    private readonly int _librariansPerPage = 4;

    private int LibrariansCount => AllLibrarians.Count;

    private List<User> AllLibrarians { get; set; } = new();

    protected override Task OnInitializedAsync()
    {
        AllLibrarians = DbApi.GetAllLibrarians();

        return base.OnInitializedAsync();
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { _currentPageNumber = newPageNumber; });
    }

}