@page "/login"
@using System.Text.RegularExpressions
@using library_management_system.Database
@using library_management_system.Services
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Login</PageTitle>

<h1>Login</h1>

<div class="form-group mb-3">
    <label for="username">Username</label>
    <input id="username" class="form-control" @bind=@LoginInput @oninput="@((str) => ValidateLogin((string)str.Value))" />
</div>

@if(loginInvalid)
{
    <p>
        Invalid login format
    </p>
}

<div class="form-group mb-3">
    <label for="password">Password</label>
    <input id="password" type="text" class="form-control" @bind=@PasswordInput @oninput="@((str) => ValidatePassword((string)str.Value))" />
</div>

@if (passwordInvalid)
{
    <p>
        Invalid password format
    </p>
}

<button @onclick="HandleLogin" class="btn btn-primary">Login</button>

@code {
    bool loginInvalid = false;
    bool passwordInvalid = false;
    string LoginInput { get; set; }
    string PasswordInput { get; set; }


    private void HandleLogin()
    {
        // Your logic for handling login
        // For example, navigate to another page after successful login

        if (LoginInput == "admin")
        {
            var librarian = new Librarian();
            AuthService.User = librarian;
        }
        else if (LoginInput == "user")
        {
            var reader = new Reader();
            AuthService.User = reader;
        }
        
        NavigationManager.NavigateTo("/");
    }

    private void ValidateLogin(string login)
    {
        if(ValidateLoginAndPasswordFormat(login)){
            loginInvalid = true;
        }
        else
        {
            loginInvalid = false;
        }
    }
    
    private void ValidatePassword(string login)
    {
        if(ValidateLoginAndPasswordFormat(login)){
            passwordInvalid = true;
        }
        else
        {
            passwordInvalid = false;
        }
    }

    private bool ValidateLoginAndPasswordFormat(string input)
    {
        // Your logic for validating login and password format
        // For example, check if the input is between 5 and 20 characters long
        // and contains at least one uppercase letter and one digit
        if(input.Length is > 5 and <= 20 && Regex.IsMatch(input, @"^(?=.*[A-Z])(?=.*\d)[A-Za-z\d]*$"))
            return false;
        
        return true;
    }
}