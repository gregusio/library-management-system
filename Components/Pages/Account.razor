@page "/account"
@rendermode InteractiveServer
@using library_management_system.Services
@using library_management_system.Database
@using Microsoft.AspNetCore.Identity
@inject AuthService AuthService
@inject DbApi DbApi

<h3>Account</h3>

<UserRecord User="@(AuthService.User)"></UserRecord>

<Button Color="ButtonColor.Primary" Size="Size.Medium" Style="margin-top: 10px" @onclick="OnShowChangeLoginClick">Change login</Button>

<Button Color="ButtonColor.Primary" Size="Size.Medium" Style="margin-top: 10px" @onclick="OnShowChangePasswordClick">Change password</Button>


<Modal @ref="_loginModal" title="Change login" IsVerticallyCentered="true" Size="ModalSize.ExtraLarge" OnHiding="OnHideModalClick">
    <BodyTemplate>
        <Toasts class="p-3" Messages="_messages" Placement="ToastsPlacement.TopRight"/>
        
        <p>Current login: <input @bind="@_currentLogin"/></p>
        <p>New login: <input @bind="@_newLogin"/></p>
        <p>Confirm new login: <input @bind="@_confirmNewLogin"/></p>

    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" Size="Size.Medium" @onclick="TryChangeLogin">Change login</Button>
    </FooterTemplate>
</Modal>

<Modal @ref="_passwordModal" title="Change password" IsVerticallyCentered="true" Size="ModalSize.ExtraLarge" OnHiding="OnHideModalClick">
    <BodyTemplate>
        <Toasts class="p-3" Messages="_messages" Placement="ToastsPlacement.TopRight"/>
        
        <p>Current password: <input type="password" @bind="@_currentPassword"/></p>
        <p>New password: <input type="password" @bind="@_newPassword"/></p>
        <p>Confirm new password: <input type="password" @bind="@_confirmNewPassword"/></p>

    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Primary" Size="Size.Medium" @onclick="TryChangePassword">Change login</Button>
    </FooterTemplate>
</Modal>

@code {
    private Modal _loginModal = default!;
    private Modal _passwordModal = default!;
    private User? User => AuthService.User;
    private string _currentLogin = default!;
    private string _newLogin = default!;
    private string _confirmNewLogin = default!;
    private string _currentPassword = default!;
    private string _newPassword = default!;
    private string _confirmNewPassword = default!;
    private readonly List<ToastMessage> _messages = new List<ToastMessage>();
    
    private async Task OnShowChangeLoginClick()
    {
        await _loginModal.ShowAsync();
    }
    
    private async Task OnShowChangePasswordClick()
    {
        await _passwordModal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await _loginModal.HideAsync();
        _messages.Clear();
    }
    
    private void TryChangePassword()
    {
        if (_newPassword != _confirmNewPassword)
        {
            Console.WriteLine("New password and confirm new password are not the same");
            ShowMessage(ToastType.Info, "New password and confirm new password are not the same");
            return;
        }
        
        var passwordHasher = new PasswordHasher<User>();
        var result = passwordHasher.VerifyHashedPassword(null!, User!.PasswordHash!, _currentPassword);

        if (result != PasswordVerificationResult.Success)
        {
            Console.WriteLine("Current password is not correct");
            ShowMessage(ToastType.Warning, "Current password is not correct");
            return;
        }

        User.PasswordHash = passwordHasher.HashPassword(null!, _newPassword);
        DbApi.SaveChanges();
        ShowMessage(ToastType.Success, "Password changed successfully");
    }
    
    private void TryChangeLogin()
    {
        if (_newLogin != _confirmNewLogin)
        {
            Console.WriteLine("New login and confirm new login are not the same");
            ShowMessage(ToastType.Info, "New login and confirm new login are not the same");
            return;
        }

        if (_currentLogin != User!.Login)
        {
            Console.WriteLine("Current login is not correct");
            ShowMessage(ToastType.Warning, "Current login is not correct");
            return;
        }

        User.Login = _newLogin;
        DbApi.SaveChanges();
        ShowMessage(ToastType.Success, "Login changed successfully");
    }
    
    private void ShowMessage(ToastType toastType, string message)
    {
        _messages.Add(CreateToastMessage(toastType, message));
    }
    
    private ToastMessage CreateToastMessage(ToastType toastType, string message)
    {
        switch (toastType)
        {
            case ToastType.Info:
                return new ToastMessage
                {
                    Type = toastType,
                    Title = "Info",
                    HelpText = $"{DateTime.Now}",
                    Message = message
                };
            case ToastType.Success:
                return new ToastMessage
                {
                    Type = toastType,
                    Title = "Success",
                    HelpText = $"{DateTime.Now}",
                    Message = message
                };
            default:
                return new ToastMessage
                {
                    Type = toastType,
                    Title = "Warning",
                    HelpText = $"{DateTime.Now}",
                    Message = message
                };
        }
    }
}